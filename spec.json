{"procedure" : "init"}  /*init tdc device*/ 
{"procedure" : "close"} /*close tdc device*/
{
	"procedure" : "isInit",
	"output" : [true] /*bool*/
}
{
	"procedure" : "getSettings",
	"output" : [
		true,	/*TriggerMode: bool */
		true,	/*TriggerSubtraction: bool*/
		true,	/*TdcMeta: bool*/
		0,		/*WindowWidth: uint*/
		1,		/*WindowOffset: int*/
		2,		/*EdgeDetection: uint*/
		3,		/*Lsb: uint*/
		4,		/*AlmostFull: uint*/
		5,		/*Control: uint*/
		6,		/*Status: uint*/
		7,		/*DeadTime: uint*/
		8		/*EventBLT: uint*/
	]
}
{
	"procedure" : "setSettings",
	"input" : [
		true,	/*TriggerMode: bool*/
		true,	/*TriggerSubtraction: bool*/
		true,	/*TdcMeta: bool*/
		0,		/*WindowWidth: uint*/
		0,		/*WindowOffset: int*/
		0,		/*EdgeDetection: uint*/
		0,		/*Lsb: uint*/
		0,		/*AlmostFull: uint*/
		0,		/*Control: uint*/
		0,		/*DeadTime: uint*/
		0		/*EventBLT: uint*/
	]

}
{ 
	"procedure" : "updateSettings" /*Read and update TDC settings*/
} 
{
	"procedure" : "getLog", /*Get TDC log*/
	"output" : ["log"] /*string*/
}
{
	"procedure" : "setLog", /*Set TDC log off/on*/
	"input" : [true] /*bool*/
}
{
	"procedure" : "setTriggerMode", /*Set trigger/continious mode*/
	"input" : [true] /*bool: [true:trigger], [false:continious]*/
}
{
	"procedure" : "setTriggerSubtraction",
	"input" : [true] /*bool*/
}
{
	"procedure" : "setTdcMeta",
	"input" : [true] /*bool*/
}
{
	"procedure" : "setWindowWidth",
	"input" : [0] /*uint*/
}
{
	"procedure" : "setWindowOffset",
	"input" : [0] /*int*/
}
{
	"procedure" : "setEdgeDetection",
	"input" : [0] /*uint*/
}
{
	"procedure" : "setLsb",
	"input" : [0] /*uint*/
}
{
	"procedure" : "setAlmostFull",
	"input" : [0] /*uint*/
}
{
	"procedure" : "setControl",
	"input" : [0] /*uint*/
}
{
	"procedure" : "setDeadTime",
	"input" : [0] /*uint*/
}
{
	"procedure" : "setEventBLT",
	"input" : [0] /*uint*/
}
{
	"procedure" : "startRead",
	"input" : [
		"type",  /*string: [simple], [ctudc]*/
		"dirPath"
	], 
}
{
	"procedure" : "stopRead",
}
{
	"procedure" : "startFrequency",
}
{
	"procedure" : "stopFrequency",
	"output"    : [
		{
			"chamber" : 0, /*Number of chamber*/
			"frequency" : [0, 1, 2, 3] /*Frequencies of each wire in chamber*/
		},
		{
			"chamber" : 1,
			"frequency" : [4, 5, 6, 7]
		}
		/*And so on*/
	]
}
{
	"procedure" : "getProcess",
	"output" : [
		"process name" /*string: [null], [read],[frequency]*/
	]
}